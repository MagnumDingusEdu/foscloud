// Code generated by sqlc. DO NOT EDIT.
// source: node.sql

package db

import (
	"context"
	"database/sql"
)

const countNodes = `-- name: CountNodes :one
SELECT count(*) FROM nodes
`

func (q *Queries) CountNodes(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countNodes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (parent_id, name, filesize, depth, lineage, owner)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, parent_id, name, is_dir, filesize, depth, lineage, owner, created_at
`

type CreateNodeParams struct {
	ParentID sql.NullInt64  `json:"parent_id"`
	Name     string         `json:"name"`
	Filesize sql.NullInt64  `json:"filesize"`
	Depth    sql.NullInt32  `json:"depth"`
	Lineage  sql.NullString `json:"lineage"`
	Owner    sql.NullInt64  `json:"owner"`
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, createNode,
		arg.ParentID,
		arg.Name,
		arg.Filesize,
		arg.Depth,
		arg.Lineage,
		arg.Owner,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.IsDir,
		&i.Filesize,
		&i.Depth,
		&i.Lineage,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNode = `-- name: DeleteNode :exec
DELETE
FROM nodes
WHERE id = $1
`

func (q *Queries) DeleteNode(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNode, id)
	return err
}

const getNode = `-- name: GetNode :one
SELECT id, parent_id, name, is_dir, filesize, depth, lineage, owner, created_at
FROM nodes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetNode(ctx context.Context, id int64) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNode, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.IsDir,
		&i.Filesize,
		&i.Depth,
		&i.Lineage,
		&i.Owner,
		&i.CreatedAt,
	)
	return i, err
}

const listNodes = `-- name: ListNodes :many
SELECT id, parent_id, name, is_dir, filesize, depth, lineage, owner, created_at
FROM nodes
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListNodesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNodes(ctx context.Context, arg ListNodesParams) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, listNodes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Node{}
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.Name,
			&i.IsDir,
			&i.Filesize,
			&i.Depth,
			&i.Lineage,
			&i.Owner,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

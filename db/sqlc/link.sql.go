// Code generated by sqlc. DO NOT EDIT.
// source: link.sql

package db

import (
	"context"
)

const countLinks = `-- name: CountLinks :one
SELECT count(*) FROM links
`

func (q *Queries) CountLinks(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLinks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLink = `-- name: CreateLink :one
INSERT INTO links (node, link, password)
VALUES ($1, $2, $3)
RETURNING id, node, link, clicks, password, created_at
`

type CreateLinkParams struct {
	Node     int64  `json:"node"`
	Link     string `json:"link"`
	Password string `json:"password"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink, arg.Node, arg.Link, arg.Password)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Node,
		&i.Link,
		&i.Clicks,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE
FROM links
WHERE id = $1
`

func (q *Queries) DeleteLink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLink, id)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, node, link, clicks, password, created_at
FROM links
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetLink(ctx context.Context, id int64) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLink, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Node,
		&i.Link,
		&i.Clicks,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listLinks = `-- name: ListLinks :many
SELECT id, node, link, clicks, password, created_at
FROM links
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListLinksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLinks(ctx context.Context, arg ListLinksParams) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listLinks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Node,
			&i.Link,
			&i.Clicks,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :one
UPDATE links
SET (link, password) = ($2, $3)
WHERE id = $1
RETURNING id, node, link, clicks, password, created_at
`

type UpdateLinkParams struct {
	ID       int64  `json:"id"`
	Link     string `json:"link"`
	Password string `json:"password"`
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, updateLink, arg.ID, arg.Link, arg.Password)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Node,
		&i.Link,
		&i.Clicks,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

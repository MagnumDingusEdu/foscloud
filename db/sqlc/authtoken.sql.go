// Code generated by sqlc. DO NOT EDIT.
// source: authtoken.sql

package db

import (
	"context"
	"time"
)

const createAuthToken = `-- name: CreateAuthToken :one
INSERT INTO authtoken (token, account)
VALUES ($1, $2)
RETURNING id, token, account, created_at, last_used
`

type CreateAuthTokenParams struct {
	Token   string `json:"token"`
	Account int64  `json:"account"`
}

func (q *Queries) CreateAuthToken(ctx context.Context, arg CreateAuthTokenParams) (Authtoken, error) {
	row := q.db.QueryRowContext(ctx, createAuthToken, arg.Token, arg.Account)
	var i Authtoken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Account,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const deleteAuthToken = `-- name: DeleteAuthToken :exec
DELETE
FROM authtoken
WHERE account = $1
`

func (q *Queries) DeleteAuthToken(ctx context.Context, account int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthToken, account)
	return err
}

const getAuthTokenByAccount = `-- name: GetAuthTokenByAccount :one
SELECT id, token, account, created_at, last_used
FROM authtoken
WHERE account = $1
LIMIT 1
`

func (q *Queries) GetAuthTokenByAccount(ctx context.Context, account int64) (Authtoken, error) {
	row := q.db.QueryRowContext(ctx, getAuthTokenByAccount, account)
	var i Authtoken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Account,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const getAuthTokenByID = `-- name: GetAuthTokenByID :one
SELECT id, token, account, created_at, last_used
FROM authtoken
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAuthTokenByID(ctx context.Context, id int64) (Authtoken, error) {
	row := q.db.QueryRowContext(ctx, getAuthTokenByID, id)
	var i Authtoken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Account,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const updateAuthTokenDate = `-- name: UpdateAuthTokenDate :one
UPDATE authtoken
SET last_used = $2
WHERE account = $1
RETURNING id, token, account, created_at, last_used
`

type UpdateAuthTokenDateParams struct {
	Account  int64     `json:"account"`
	LastUsed time.Time `json:"last_used"`
}

func (q *Queries) UpdateAuthTokenDate(ctx context.Context, arg UpdateAuthTokenDateParams) (Authtoken, error) {
	row := q.db.QueryRowContext(ctx, updateAuthTokenDate, arg.Account, arg.LastUsed)
	var i Authtoken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Account,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const updateAuthTokenValue = `-- name: UpdateAuthTokenValue :one
UPDATE authtoken
SET token = $2
WHERE account = $1
RETURNING id, token, account, created_at, last_used
`

type UpdateAuthTokenValueParams struct {
	Account int64  `json:"account"`
	Token   string `json:"token"`
}

func (q *Queries) UpdateAuthTokenValue(ctx context.Context, arg UpdateAuthTokenValueParams) (Authtoken, error) {
	row := q.db.QueryRowContext(ctx, updateAuthTokenValue, arg.Account, arg.Token)
	var i Authtoken
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.Account,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}
